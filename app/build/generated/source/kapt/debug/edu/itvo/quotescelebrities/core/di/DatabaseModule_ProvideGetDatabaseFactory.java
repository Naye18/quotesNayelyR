// Generated by Dagger (https://dagger.dev).
package edu.itvo.quotescelebrities.core.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import edu.itvo.quotescelebrities.data.local.QuoteDB;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideGetDatabaseFactory implements Factory<QuoteDB> {
  private final DatabaseModule module;

  private final Provider<Context> appContextProvider;

  private final Provider<CoroutineScope> scopeProvider;

  public DatabaseModule_ProvideGetDatabaseFactory(DatabaseModule module,
      Provider<Context> appContextProvider, Provider<CoroutineScope> scopeProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
    this.scopeProvider = scopeProvider;
  }

  @Override
  public QuoteDB get() {
    return provideGetDatabase(module, appContextProvider.get(), scopeProvider.get());
  }

  public static DatabaseModule_ProvideGetDatabaseFactory create(DatabaseModule module,
      Provider<Context> appContextProvider, Provider<CoroutineScope> scopeProvider) {
    return new DatabaseModule_ProvideGetDatabaseFactory(module, appContextProvider, scopeProvider);
  }

  public static QuoteDB provideGetDatabase(DatabaseModule instance, Context appContext,
      CoroutineScope scope) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetDatabase(appContext, scope));
  }
}
